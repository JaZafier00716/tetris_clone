#include "../include/header.h"

void draw_background(SDL_Renderer *renderer, SDL_Color color)
{
    SDL_SetRenderDrawColor(
        renderer,
        color.r,
        color.g,
        color.b,
        color.a);

    SDL_RenderClear(renderer);
}

void draw_rectangle(SDL_Renderer *renderer, double move_x, double move_y, TColor color)
{
    SDL_SetRenderDrawColor(
        renderer,
        color.secondary.r,
        color.secondary.g,
        color.secondary.b,
        color.secondary.a);

    const SDL_FRect square1_1 = {FIELD_SQUARE_SIZE * move_x + FIELD_SQUARE_SPACE * move_x, FIELD_SQUARE_SIZE * move_y + FIELD_SQUARE_SPACE * move_y, FIELD_SQUARE_SIZE, FIELD_SQUARE_SIZE};
    SDL_RenderFillRectF(
        renderer,
        &square1_1);

    SDL_SetRenderDrawColor(
        renderer,
        color.primary.r,
        color.primary.g,
        color.primary.b,
        color.primary.a);

    const SDL_FRect square1_2 = {FIELD_SQUARE_SIZE * move_x + FIELD_SQUARE_SPACE * move_x, FIELD_SQUARE_SIZE * move_y + FIELD_SQUARE_SPACE * move_y, FIELD_SQUARE_SIZE - FIELD_SQUARE_SHADE_WIDTH, FIELD_SQUARE_SIZE - FIELD_SQUARE_SHADE_WIDTH};
    SDL_RenderFillRectF(
        renderer,
        &square1_2);
}

void draw_playing_field(SDL_Renderer *renderer, TRow *first, TRow *last)
{
    TRow *p;

    for (int i = 0; i < FIELD_WIDTH + 2; i++)
    {
        draw_rectangle(renderer, i, 0, dark);
    }

    for (p = first; p != NULL; p = p->next)
    {
        draw_rectangle(renderer, 0, p->id + 1, dark);
        for (int j = 0; j < FIELD_WIDTH; j++)
        {
            if (p->nodes[j].exists)
            {
                draw_rectangle(renderer, j + 1, p->id + 1, p->nodes[j].color);
            }
        }
        draw_rectangle(renderer, FIELD_WIDTH + 1, p->id + 1, dark);
    }
    for (int i = 0; i < FIELD_WIDTH + 2; i++)
    {
        draw_rectangle(renderer, i, FIELD_HEIGHT + 1, dark);
    }
}

void draw_object_I(SDL_Renderer *renderer, TColor color, double x_coords, double y_coords, int *width, int *height, int rotation, TRow *first, TRow *last)
{
    TRow *p;
    if (rotation % 2 == 0)
    {
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                if (i == 2)
                {
                    for (p = first; p->id != (int)(i + y_coords - 1); p = p->next)
                        ; // move to the next row
                    if (p->nodes[(int)(j + x_coords - 1)].exists)
                    { // There is a node in a way
                        return;
                    }
                    else
                    {
                        p->nodes[(int)(j + x_coords - 1)].exists = true;
                        p->nodes[(int)(j + x_coords - 1)].moving = true;
                        p->nodes[(int)(j + x_coords - 1)].color = color;
                    }

                    // draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
            }
        }
        *height = 1;
        *width = 4;
    }
    else
    {
        for (int i = 0; i < 4; i++)
        {
            for (p = first; p->id != (int)(i + y_coords - 1); p = p->next)
                ; // move to the next row
            if (p->nodes[(int)(2 + x_coords - 1)].exists)
            { // There is a node in a way
                return;
            }
            else // If there is not, create a new one
            {
                p->nodes[(int)(2 + x_coords - 1)].exists = true;
                p->nodes[(int)(2 + x_coords - 1)].moving = true;
                p->nodes[(int)(2 + x_coords - 1)].color = color;
            }
            // draw_rectangle(renderer, 2 + x_coords, i + y_coords, color);
        }
        *height = 4;
        *width = 1;
    }
}

void draw_object_O(SDL_Renderer *renderer, TColor color, double x_coords, double y_coords, int *width, int *height, int rotation, TRow *first, TRow *last)
{
    TRow *p;
    for (int i = 0; i < 2; i++)
    {
        for (p = first; p->id != (i + y_coords - 1); p = p->next)
            ; // move to the next row
        for (int j = 0; j < 2; j++)
        {
            if (p->nodes[(int)(j + x_coords - 1)].exists)
            { // There is a node in a way
                return;
            }
            else // If there is not, create a new one
            {
                p->nodes[(int)(j + x_coords - 1)].exists = true;
                p->nodes[(int)(j + x_coords - 1)].moving = true;
                p->nodes[(int)(j + x_coords - 1)].color = color;
            }
            // draw_rectangle(renderer, j + x_coords, i + y_coords, color);
        }
    }
    *height = 2;
    *width = 2;
}

void draw_object_T(SDL_Renderer *renderer, TColor color, double x_coords, double y_coords, int *width, int *height, int rotation, TRow *first, TRow *last)
{
    TRow *p;
    switch (rotation)
    {
    case 0:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 1)
                {
                    for (p = first; p->id != (i + y_coords - 1); p = p->next)
                        ; // move to the next row
                    if (p->nodes[(int)(j + x_coords - 1)].exists)
                    { // There is a node in a way
                        return;
                    }
                    else // If there is not, create a new one
                    {
                        p->nodes[(int)(j + x_coords - 1)].exists = true;
                        p->nodes[(int)(j + x_coords - 1)].moving = true;
                        p->nodes[(int)(j + x_coords - 1)].color = color;
                    }
                    // draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 2 && j == 1)
                    {
                        for (p = first; p->id != (i + y_coords - 1); p = p->next)
                            ; // move to the next row
                        if (p->nodes[(int)(j + x_coords - 1)].exists)
                        { // There is a node in a way
                            return;
                        }
                        else // If there is not, create a new one
                        {
                            p->nodes[(int)(j + x_coords - 1)].exists = true;
                            p->nodes[(int)(j + x_coords - 1)].moving = true;
                            p->nodes[(int)(j + x_coords - 1)].color = color;
                        }
                        // draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }

        *width = 3;
        *height = 2;
        break;
    case 1:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if ((i == 0 || i == 2) && j == 1)
                {
                    for (p = first; p->id != (i + y_coords - 1); p = p->next)
                        ; // move to the next row
                    if (p->nodes[(int)(j + x_coords - 1)].exists)
                    { // There is a node in a way
                        return;
                    }
                    else // If there is not, create a new one
                    {
                        p->nodes[(int)(j + x_coords - 1)].exists = true;
                        p->nodes[(int)(j + x_coords - 1)].moving = true;
                        p->nodes[(int)(j + x_coords - 1)].color = color;
                    }
                    // draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 1 && j < 2)
                    {
                        for (p = first; p->id != (i + y_coords - 1); p = p->next)
                            ; // move to the next row
                        if (p->nodes[(int)(j + x_coords - 1)].exists)
                        { // There is a node in a way
                            return;
                        }
                        else // If there is not, create a new one
                        {
                            p->nodes[(int)(j + x_coords - 1)].exists = true;
                            p->nodes[(int)(j + x_coords - 1)].moving = true;
                            p->nodes[(int)(j + x_coords - 1)].color = color;
                        }
                        // draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 2;
        *height = 3;
        break;
    case 2:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 0 && j == 1)
                {
                    for (p = first; p->id != (i + y_coords - 1); p = p->next)
                        ; // move to the next row
                    if (p->nodes[(int)(j + x_coords - 1)].exists)
                    { // There is a node in a way
                        return;
                    }
                    else // If there is not, create a new one
                    {
                        p->nodes[(int)(j + x_coords - 1)].exists = true;
                        p->nodes[(int)(j + x_coords - 1)].moving = true;
                        p->nodes[(int)(j + x_coords - 1)].color = color;
                    }
                    // draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 1)
                    {
                        for (p = first; p->id != (i + y_coords - 1); p = p->next)
                            ; // move to the next row
                        if (p->nodes[(int)(j + x_coords - 1)].exists)
                        { // There is a node in a way
                            return;
                        }
                        else // If there is not, create a new one
                        {
                            p->nodes[(int)(j + x_coords - 1)].exists = true;
                            p->nodes[(int)(j + x_coords - 1)].moving = true;
                            p->nodes[(int)(j + x_coords - 1)].color = color;
                        }
                        // draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 3;
        *height = 2;
        break;
    case 3:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if ((i == 0 || i == 2) && j == 1)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 1 && j > 0)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 2;
        *height = 3;
        break;
    }
}

void draw_object_J(SDL_Renderer *renderer, TColor color, double x_coords, double y_coords, int *width, int *height, int rotation, TRow *first, TRow *last)
{
    switch (rotation)
    {
    case 0:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 1)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i > 1 && j == 2)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 3;
        *height = 2;
        break;
    case 1:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i < 2 && j == 1)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 2 && j < 2)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 2;
        *height = 3;
        break;
    case 2:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 0 && j == 0)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 1)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 3;
        *height = 2;
        break;
    case 3:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 0 && j > 0)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i > 0 && j == 1)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 2;
        *height = 3;
        break;
    }
}

void draw_object_L(SDL_Renderer *renderer, TColor color, double x_coords, double y_coords, int *width, int *height, int rotation, TRow *first, TRow *last)
{
    switch (rotation)
    {
    case 0:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 1)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i > 1 && j == 0)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 3;
        *height = 2;
        break;
    case 1:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 0 && j < 2)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i > 0 && j == 1)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 2;
        *height = 3;
        break;
    case 2:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 0 && j == 2)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 1)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 3;
        *height = 2;
        break;
    case 3:
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i < 2 && j == 1)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 2 && j > 0)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                }
            }
        }
        *width = 2;
        *height = 3;
        break;
    default:
        break;
    }
}

void draw_object_S(SDL_Renderer *renderer, TColor color, double x_coords, double y_coords, int *width, int *height, int rotation, TRow *first, TRow *last)
{
    if (rotation % 2 == 0)
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if ((i == 1 && j > 0) || (i == 2 && j < 2))
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
            }
        }

        *height = 2;
        *width = 3;
    }
    else
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 0 && j == 1)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 1 && j > 0)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                    else
                    {
                        if (i == 2 && j == 2)
                        {
                            draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                        }
                    }
                }
            }
        }

        *height = 3;
        *width = 2;
    }
}

void draw_object_Z(SDL_Renderer *renderer, TColor color, double x_coords, double y_coords, int *width, int *height, int rotation, TRow *first, TRow *last)
{
    if (rotation % 2 == 0)
    {

        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if ((i == 2 && j > 0) || (i == 1 && j < 2))
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
            }
        }
        *height = 2;
        *width = 3;
    }
    else
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (i == 0 && j == 2)
                {
                    draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                }
                else
                {
                    if (i == 1 && j > 0)
                    {
                        draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                    }
                    else
                    {
                        if (i == 2 && j == 1)
                        {
                            draw_rectangle(renderer, j + x_coords, i + y_coords, color);
                        }
                    }
                }
            }
        }

        *height = 3;
        *width = 2;
    }
}

void draw_color_palette(SDL_Renderer *renderer)
{
    int k = 0, j = 1, i = 1;
    TColor color[] = {
        light,
        dark,
        red,
        yellow,
        green,
        cyan,
        blue,
        purple,
        orange};

    while (k < 27)
    {
        if (k < 9)
        {
            draw_rectangle(renderer, j, i, color[k]);
        }
        else
        {
            if (k < 18)
            {
                SDL_SetRenderDrawColor( // light red
                    renderer,
                    color[k - 9].primary.r,
                    color[k - 9].primary.g,
                    color[k - 9].primary.b,
                    color[k - 9].primary.a);
            }
            else
            {
                SDL_SetRenderDrawColor( // light red
                    renderer,
                    color[k - 18].secondary.r,
                    color[k - 18].secondary.g,
                    color[k - 18].secondary.b,
                    color[k - 18].secondary.a);
            }
            const SDL_Rect square1_2 = {FIELD_SQUARE_SIZE * j + FIELD_SQUARE_SPACE * j, FIELD_SQUARE_SIZE * i + FIELD_SQUARE_SPACE * i, FIELD_SQUARE_SIZE - FIELD_SQUARE_SHADE_WIDTH, FIELD_SQUARE_SIZE - FIELD_SQUARE_SHADE_WIDTH};

            SDL_RenderFillRect(
                renderer,
                &square1_2);
        }
        j++;
        k++;
        if (k == 9 || k == 18)
        {
            i++;
            j = 1;
        }
        else
        {
            if (j > FIELD_WIDTH)
            {
                j = 1;
                i++;
            }
        }
    }
}